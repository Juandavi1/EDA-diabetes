# Configuración del documento
options(
knitr.table.format = "html",
knitr.table.css = "font-size: 24pt;",
knitr.table.bg = "#F5F5F5"
)
# Cargar paquetes
library(tidyverse)
library(ggplot2)
library(plotly)
library(caret)
# Configuración de la visualización de datos
theme_set(theme_minimal(base_size = 18))
# Cargar datos
glucose <- read_csv("data/glucose.csv")
oximetry <- read_csv("data/Oximetry.csv", col_types = cols())
bloodPressure <- read_csv("data/bloodPressure.csv", col_types = cols())
imc <- read_csv("data/Weight_Height.csv", col_types = cols())
# Función para determinar si es mañana o tarde
is_morning <- function(datetime) {
hour <- lubridate::hour(datetime)
ifelse(hour >= 6 & hour < 12, TRUE, FALSE)
}
# Análisis de datos para glucosa
glucose$Date <- lubridate::mdy_hm(glucose$Date)
glucose$is_morning <- ifelse(is_morning(glucose$Date), "Morning", "Afternoon")
# Análisis de datos para oximetría
oximetry$Date <- lubridate::mdy_hm(oximetry$Date)
# Análisis de datos para presión arterial
bloodPressure$Date <- lubridate::mdy_hm(bloodPressure$Date)
# Análisis de datos para IMC
imc$Date <- lubridate::mdy_hm(imc$Date)
# Eliminar outliers de presión arterial
bloodPressure <- bloodPressure %>%
filter(Systolic > 0 & Diastolic > 0 & AvBloodPressure > 0 & HeartRate > 0)
# Unir los datos en una tabla
diabetes <- glucose %>%
inner_join(oximetry, by = c("Patient", "Date")) %>%
inner_join(bloodPressure, by = c("Patient", "Date")) %>%
inner_join(imc, by = c("Patient", "Date")) %>%
select(-Patient, -is_morning)
diabetes <- diabetes %>%
mutate(Date = as.numeric(Date))
ggplotly(ggcorrplot(cor(dianetes)))
library(ggcorrplot)
ggplotly(ggcorrplot(cor(dianetes)))
ggplotly(ggcorrplot(cor(diabetes)))
control <- trainControl(method = "cv", number = 5)  # Validación cruzada de 5 pliegues
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes,  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 2:10),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
wss <- 0
wss <- 0
for (i in 1:15) {
km.iris <- kmeans(scale(diabetes), centers = i, nstart=25, iter.max = 50)
wss[i] <- km.iris$tot.withinss
}
wss
plot(1:15, wss, type = "b",
xlab = "Numero de Clusters",
ylab = "Suma de cuadrados entre grupos")
par(mfrow = c(1, 1))
plot(1:15, wss, type = "b",
xlab = "Numero de Clusters",
ylab = "Suma de cuadrados entre grupos")
for (i in 1:30) {
km.iris <- kmeans(scale(diabetes), centers = i, nstart=25, iter.max = 50)
wss[i] <- km.iris$tot.withinss
}
plot(1:15, wss, type = "b",
xlab = "Numero de Clusters",
ylab = "Suma de cuadrados entre grupos")
plot(1:15, wss, type = "b",
xlab = "Numero de Clusters",
ylab = "Suma de cuadrados entre grupos")
wss
plot(1:30, wss, type = "b",
xlab = "Numero de Clusters",
ylab = "Suma de cuadrados entre grupos")
control <- trainControl(method = "cv", number = 5)  # Validación cruzada de 5 pliegues
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes,  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 2:10),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
control <- trainControl(method = "cv", number = 5)  # Validación cruzada de 5 pliegues
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes,  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 3),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
control <- trainControl(method = "cv", number = 5)  # Validación cruzada de 5 pliegues
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes, y = NULL,  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 3),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes, y = cluster,  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 3),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes, y = cluster(),  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 3),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
diabetes
library(doParallel)
install.packages("doParallel")
library(doParallel)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
wss <- 0
wss <- 0
for (i in 1:30) {
km.iris <- kmeans(scale(diabetes), centers = i, nstart=25, iter.max = 50)
wss[i] <- km.iris$tot.withinss
}
stopCluster(cl)
plot(1:30, wss, type = "b",
xlab = "Numero de Clusters",
ylab = "Suma de cuadrados entre grupos")
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes, y=c()  # Tus datos
method = "kmeans",  # Método de clustering K-Means
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes, y=c(),  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 3),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
# Entrenar el modelo K-Means con caret
kmeans_model <- train(x = diabetes, y=factor(),  # Tus datos
method = "kmeans",  # Método de clustering K-Means
trControl = control,  # Configuración de validación cruzada
preProcess = c("center", "scale"),  # Preprocesamiento opcional
tuneGrid = data.frame(k = 3),  # Rango de número de clusters
metric = "silhouette"  # Métrica de evaluación
)
source("deps.r")
source("deps.r")
source("utils.r")
plot_ly(
type = "sunburst",
ids = modelo_arbol$frame$var,
labels = modelo_arbol$frame$yval,
parents = modelo_arbol$frame$var_parent,
values = modelo_arbol$frame$n,
branchvalues = "total"
) %>%
layout(
margin = list(l = 0, r = 0, b = 0, t = 0)
) %>%
config(displayModeBar = FALSE)
